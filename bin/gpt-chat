#!/usr/bin/env bash
#
# GPT-Chat (c) 2023 Normen Hansen
# - needs jq
# - optionally uses rlwrap
#
set -e
api_server_url="https://api.openai.com"

# list of available commands
command_list=":name :models :model :temperature :max_tokens :enable_functions :disable_functions :last :first :deletelast :compact :save"
# default path to cloud storage
cloud_path="$HOME/Library/Mobile Documents/com~apple~CloudDocs/GPT"
if [ ! -d "$cloud_path" ]; then
  cloud_path="$HOME/.config/gpt-chat"
fi
# collected external function descriptions
function_description="[]"

if ! which jq>/dev/null; then
  echo "Error: jq command not found, please install with 'sudo apt install jq'"
  exit 1
fi

# set $NORMEN if not exists to ~/.normen
if [ -z "$NORMEN" ]; then
  export NORMEN="$HOME/.normen"
fi

check_python_env(){
  if [ ! -d "$NORMEN/.pyenv" ]; then
    python3 -m venv "$NORMEN/.pyenv"
    source "$NORMEN/.pyenv/bin/activate"
    pip3 install openai chromadb-client click starlette
  fi

}

add_conversation_functions(){
  load_config
  create_conversation
  jq --compact-output --argjson funcs "$function_description" '.tools = $funcs' \
    "$cloud_path/conversation/$current_conversation.json" \
    > "$cloud_path/conversation/$current_conversation.new"
  mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
}

remove_conversation_functions(){
  load_config
  create_conversation
  jq --compact-output '.tools = []' \
    "$cloud_path/conversation/$current_conversation.json" \
    > "$cloud_path/conversation/$current_conversation.new"
  mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
}

load_functions(){
  basename="$1"
  # TODO: check if exists
  source ~/.normen/bin/gpt-functions/$basename
  cur_func=$("${basename}_functions" | jq -c .)
  function_description=$(echo "$function_description" | jq -c --argjson func "$cur_func" '. += $func')
}

load_config(){
  create_folders
  create_config
  api_key=$(jq -r '.api_key' "$cloud_path/config.json")
  current_conversation=$(jq -r '.current_conversation' "$cloud_path/config.json")
  system_message=$(jq -r '.system_message' "$cloud_path/config.json")
  model_name=$(jq -r '.model_name' "$cloud_path/config.json")
  max_tokens=$(jq -r '.max_tokens' "$cloud_path/config.json")
  temperature=$(jq -r '.temperature' "$cloud_path/config.json")
  loop_question=$(jq -r '.loop_question' "$cloud_path/config.json")
  intro_question=$(jq -r '.intro_question' "$cloud_path/config.json")
}

create_folders(){
  if [ ! -d "$cloud_path" ]; then
    cloud_path="$(mktemp -d)"
    #echo "Creating: $cloud_path"
    trap "rm -rf $cloud_path; echo 'Deleted temp folder'>&2" EXIT
  fi
  if [ ! -d "$cloud_path/conversation" ]; then
    mkdir -p "$cloud_path/conversation"
  fi
  if [ ! -d "$cloud_path/cli" ]; then
    mkdir -p "$cloud_path/cli"
  fi
  if [ ! -d "$cloud_path/backup" ]; then
    mkdir -p "$cloud_path/backup"
  fi
  if [ ! -f "$cloud_path/cli/compl" ]; then
    echo "$command_list" \
      > "$cloud_path/cli/compl"
  fi
}

create_config(){
  if [ ! -f "$cloud_path/config.json" ]; then
    #echo "Creating: $cloud_path/config.json"
    echo '{
      "model_name":"gpt-3.5-turbo",
      "max_tokens":1024,
      "temperature":1,
      "system_message": "Du bist eine freundliche KI die stets mit akkuraten Informationen zur Hilfe steht.",
      "intro_question":"Wie kann ich helfen?",
      "loop_question":"Noch etwas?",
      "current_conversation": "conversation"
    }' > "$cloud_path/config.json"
    api_key=$(cat ~/.config/openaiapirc | sed -n -e 's/^secret_key *= *\(.*\)$/\1/p')
    if [ "$api_key" == "" ];then
      echo "Error: No API key found at ~/.config/openaiapirc (secret_key=xxx)"
      exit 1
    fi
    set_config api_key "$api_key"
  fi
}

set_config(){
  create_folders
  create_config
  jq --compact-output --arg name "$1" --arg value "$2" '.[$name] = $value' \
    "$cloud_path/config.json" > "$cloud_path/config.new"
  mv "$cloud_path/config.new" "$cloud_path/config.json"
}

set_config_number(){
  create_folders
  create_config
  jq --compact-output --arg name "$1" --argjson value $2 '.[$name] = $value' \
    "$cloud_path/config.json" > "$cloud_path/config.new"
  mv "$cloud_path/config.new" "$cloud_path/config.json"
}

create_conversation(){
  if [ ! -f "$cloud_path/conversation/$current_conversation.json" ]; then
    jq --null-input --compact-output\
      --arg model_name "$model_name"\
      --argjson max_tokens "$max_tokens"\
      --argjson temperature "$temperature"\
      --arg system_message "$system_message" '{
          "model": $model_name,
          "max_tokens": $max_tokens,
          "temperature": $temperature,
          "messages": [
          { "role": "system",
            "content": $system_message }
            ]
          }' > "$cloud_path/conversation/$current_conversation.json"
    if [ ! -z $use_functions ]; then
      add_conversation_functions
    fi
  fi
}

set_conversation_config(){
  create_folders
  create_conversation
  jq --compact-output --arg name "$1" --arg value "$2" '.[$name] = $value' \
    "$cloud_path/conversation/$current_conversation.json" > "$cloud_path/conversation/$current_conversation.new"
  mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
}

set_conversation_number(){
  create_folders
  create_conversation
  jq --compact-output --arg name "$1" --argjson value $2 '.[$name] = $value' \
    "$cloud_path/conversation/$current_conversation.json" > "$cloud_path/conversation/$current_conversation.new"
  mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
}

get_model_list(){
  server_response=$(curl -s $api_server_url/v1/models \
                  -H "Authorization: Bearer ${api_key}" |\
                  jq -r '.data[].id | select(startswith("gpt"))')
  echo "$server_response"
}

get_noperm_answer(){
  set -e
  server_response=$(jq --compact-output --arg c "$1" '.messages = .messages + [{"role": "user", "content": $c }]' \
    "$cloud_path/conversation/$current_conversation.json" |\
    curl -s $api_server_url/v1/chat/completions \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer ${api_key}" \
      -d @-)
  error_message=$(echo "$server_response" | jq -r '.error.message')
  if [ "$error_message" != "null" ]; then
    echo "Error: $error_message"
  else
    chatgpt_output=$(echo "$server_response" | jq -r '.choices[0].message.content')
    echo "$chatgpt_output"
  fi
}

compact_answers(){
  load_config
  instruction="Bitte fasse das Gespräch bis hier in Kurzform zusammen. Bitte mit allen wichtigen Informationen so dass es als Vorlage für eine Weiterführung des Gesprächs verwendet werden kann. Bitte verzichte dabei auf einleitende Floskeln wie \"Gerne, hier ist eine Zusammenfassung.\". Bitte schreibe die Zusammenfassung wie eine Nachricht an Dich selbst. Also z.B. \"Der Benutzer hat Dich gefragt wie weit der Mond weg ist\". Bitte schliesse nur Informationen aus Aussagen des Benutzers oder Dir ein."
  if [ $# -eq 0 ]; then
    if which rlwrap>/dev/null; then
      instruction=$(RLWRAP_HOME="$cloud_path/cli" rlwrap -pyellow -S "Instruction: " -C gpt-chat-instructions -m -M .md -n -z unbackspace -P "$instruction" -o cat)
    fi
  fi
  printf "\e[32mSystem: \e[0m"
  answer=$(get_noperm_answer "$instruction")
  echo "$answer"
  printf "\e[36m"
  read -p "Press y to delete messages in '$current_conversation' and apply summary" -n 1 -r
  printf "\e[0m"
  echo    # (optional) move to a new line
  if [[ ! $REPLY =~ ^[Yy]$ ]]
  then
    echo "Not writing changes"
    return
  fi
  # backup
  cur_date=$(date '+%Y-%m-%d %H.%M.%S')
  cp -i "$cloud_path/conversation/$current_conversation.json" "$cloud_path/backup/$current_conversation - $cur_date.json"
  # delete messages
  jq --compact-output ' .messages |= map(select(.role == "system"))' \
    "$cloud_path/conversation/$current_conversation.json" |\
    jq --compact-output --arg c "$answer" '.messages = .messages + [{"role": "system", "content": $c }]' \
    > "$cloud_path/conversation/$current_conversation.new"
  mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
  echo "Done"
}

get_gpt_answer(){
  create_conversation
  jq --compact-output --arg c "$user_input" '.messages = .messages + [{"role": "user", "content": $c }]' \
    "$cloud_path/conversation/$current_conversation.json" \
    > "$cloud_path/conversation/$current_conversation.new"
  mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
  gpt_api_completion
}

execute_functions(){
  set -e
  server_response="$1"
  server_msg=$(echo "$server_response" | jq -c '.choices[0].message')
  # add server message to message list
  jq --compact-output --argjson msg "$server_msg" \
    '.messages = .messages + [$msg]' \
    "$cloud_path/conversation/$current_conversation.json" \
    > "$cloud_path/conversation/$current_conversation.new"
  mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
  # Schleife über die Elemente des tool_call-Arrays,
  # uses file descriptor 3 to avoid issues with read in command loop
  exec 3< <(echo "$server_response" | jq -c '.choices[0].message.tool_calls[]')
  while IFS=$'\n' read -r -u 3 element; do
    tool_call_id=$(echo "$element" | jq -r '.id')
    function_name=$(echo "$element" | jq -r '.function.name')
    function_args=$(echo "$element" | jq -r '.function.arguments')
    if type "$function_name" >/dev/null 2>&1; then
      function_answer=$($function_name "$function_args")
      printf "\e[2m" >&2
      echo "$function_answer" >&2
      printf "\e[22m" >&2
      # add answer to message list
      jq --compact-output --arg tid "$tool_call_id" --arg answer "$function_answer" --arg name "$function_name" \
        '.messages = .messages + [{"tool_call_id": $tid, "role": "tool", "name": $name, "content": $answer }]' \
        "$cloud_path/conversation/$current_conversation.json" \
        > "$cloud_path/conversation/$current_conversation.new"
      mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
    else
      echo "Function $function_name doesn't exist."
    fi
  done
  gpt_api_completion
}

gpt_api_completion(){
  server_response=$(cat "$cloud_path/conversation/$current_conversation.json" |\
    curl -s $api_server_url/v1/chat/completions \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer ${api_key}" \
      -d @-)
  tokens_used="$(echo "$server_response" | jq -r '.usage.total_tokens')"
  printf "\e[36mTokens: \e[0m$tokens_used\n" >&2
  error_message=$(echo "$server_response" | jq -r '.error.message')
  function_name=$(echo "$server_response" | jq -r '.choices[0].message.tool_calls[0].function.name')
  if [ "$error_message" != "null" ]; then
    echo "Error: $error_message"
  elif [ "$function_name" != "null" ]; then
    execute_functions "$server_response"
  else
    chatgpt_output=$(echo "$server_response" | jq -r '.choices[0].message.content')
    jq --compact-output --arg c "$chatgpt_output" '.messages = .messages + [{"role": "assistant", "content": $c }]' \
      "$cloud_path/conversation/$current_conversation.json" > "$cloud_path/conversation/$current_conversation.new"
    mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
    echo "$chatgpt_output"
  fi
}

delete_last_answer(){
  load_config
  if [ -f "$cloud_path/conversation/$current_conversation.json" ]; then
    echo "Deleting last message"
    jq --compact-output 'del(.messages[-1])' \
      "$cloud_path/conversation/$current_conversation.json" \
      > "$cloud_path/conversation/$current_conversation.new"
    mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
  fi
}

show_first_message(){
  printf "\e[32mSystem: \e[0m"
  if [ -f "$cloud_path/conversation/$current_conversation.json" ]; then
    jq -r '.messages[0].content' "$cloud_path/conversation/$current_conversation.json"
  else
    echo "$system_message"
  fi
}

show_last_answer(){
  if [ -f "$cloud_path/conversation/$current_conversation.json" ]; then
    printf "\e[34mLast: \e[0m"
    jq -r '.messages[-1].content' "$cloud_path/conversation/$current_conversation.json"
  fi
}

read_stdin(){
  load_config
  user_input=$(cat)
  get_gpt_answer
}

read_input(){
  if which rlwrap>/dev/null; then
    user_input=$(RLWRAP_HOME="$cloud_path/cli" rlwrap -pyellow -f "$cloud_path/cli/compl" -D 1 -S "Mensch: " -C gpt-chat -m -M .md -n -z unbackspace -o cat)
  else
    read -r -p "Mensch: "
    user_input=$REPLY
  fi
}

do_loop(){
  user_input="-"
  load_config
  if [ -z $silent ]; then
    echo "Conversation: $current_conversation"
    echo "Path: $cloud_path"
    echo ""
    show_first_message
    show_last_answer
  fi
  echo ""
  read_input
  while [ ! "$user_input" == "" ]; do
    case $user_input in
      :temperature*)
        value=$(echo $user_input | cut -d' ' -f 2-)
        if [[ ! "$value" == ':temperature' ]]; then
          set_conversation_number "temperature" $value
        fi
        ;;
      :max_tokens*)
        value=$(echo $user_input | cut -d' ' -f 2-)
        if [[ ! "$value" == ':max_tokens' ]]; then
          set_conversation_number "max_tokens" $value
        fi
        ;;
      :models*)
        get_model_list
        ;;
      :model*)
        value=$(echo $user_input | cut -d' ' -f 2-)
        if [[ ! "$value" == ':model' ]]; then
          set_conversation_config "model" "$value"
        fi
        ;;
      :deletelast*)
        delete_last_answer
        ;;
      :compact*)
        compact_answers
        ;;
      :last*)
        show_last_answer
        ;;
      :first*)
        show_first_message
        ;;
      :enable_functions*)
        use_functions=1
        add_conversation_functions
        ;;
      :disable_functions*)
        unset use_functions
        remove_conversation_functions
        ;;
      :name*)
        echo "$current_conversation"
        ;;
      :save*)
        value=$(echo $user_input | cut -d' ' -f 2-)
        if [[ ! "$value" == ':save' ]]; then
          cp -i "$cloud_path/conversation/$current_conversation.json" "$value"
          echo "Saved conversation to $value"
        else
          echo "Pleast specify output file"
        fi
        ;;
      :exit*)
        exit
        ;;
      :*)
        echo "Available commands"
        echo "$command_list"
        ;;
      *)
        if [ ! "$user_input" == "" ]; then
          answer=$(get_gpt_answer)
          printf "\e[34mKI: \e[0m"
          echo "$answer"
          if [ ! -z $speak ]; then
            echo "$answer" | say
          fi
        fi
        ;;
    esac
    read_input
  done
}

while getopts ":hqrxCDSc:f:p:m:s:t:H:M:" option; do
  case $option in
    h) # display help
      echo "  ___ ___ _____    ___ _         _   "
      echo " / __| _ \\_   _|  / __| |_  __ _| |_ "
      echo "| (_ |  _/ | |   | (__| ' \\/ _\` |  _|"
      echo " \\___|_|   |_|    \\___|_||_\\__,_|\\__|"
      echo "              © by Normen Hansen 2023"
      echo ""
      echo "Communicate with GPT using the command line,"
      echo "conversations are kept in cloud storage or local folder."
      echo ""
      echo "These options are kept for new conversations:"
      echo "-c <conversation>: set conversation name"
      echo "-s <system_message>: set system message (prompt)"
      echo "-t <temperature>: set temperature"
      echo "-m <max_tokens>: set max tokens returned"
      echo "-M <model_name>: set model name"
      echo ""
      echo "Other options:"
      echo "-q quiet, show no info about conversation on start"
      echo "-p <cloud_path>: set path for storage (set before other options)"
      echo "-x: temporary storage only (set before other options)"
      echo "-f <functionset> use functions from set (e.g. wikipedia)"
      echo ""
      echo "Commands:"
      echo "-r read in question from stdin, display answer and exit (set after other options)"
      echo "-D delete last message and exit"
      echo "-C compact conversation by letting gpt make a summary and exit"
      echo "-H API host to use for completion (https://api.openai.com)"
      echo "-S speak AI output using 'say'"
      echo ""
      echo "Storage folder:"
      echo "If none of these are found a temp folder is created."
      echo "- iCloud/GPT"
      echo "- HOME/.config/gpt-chat"
      echo ""
      echo "API Key:"
      echo "Key is expected at ~/.config/openaiapirc (secret_key=xxx)"
      echo ""
      echo "Dependencies:"
      echo "Needs jq for JSON processing and optionally rlwrap,"
      echo "rlwrap allows for completion, history and multiline editor input."
      exit;;
    x) cloud_path="";;
    p) cloud_path="$OPTARG"
      if [ ! -d "$cloud_path" ]; then
        mkdir -p "$cloud_path"
      fi;;
    S) speak=1;;
    H) api_server_url="$OPTARG";;
    q) silent=1;;
    f) load_functions "$OPTARG"
      use_functions=1;;
    c) set_config "current_conversation" "$OPTARG";;
    M) set_config "model_name" "$OPTARG";;
    s) set_config "system_message" "$OPTARG";;
    t) set_config_number "temperature" $OPTARG;;
    m) set_config_number "max_tokens" $OPTARG;;
    D) delete_last_answer
      exit;;
    C) compact_answers
      exit;;
    r) read_stdin
      exit;;
    \?)
      echo "Error: Invalid option, use -h for help."
      exit;;
  esac
done
shift $((OPTIND-1))

create_folders
create_config
check_python_env
do_loop
