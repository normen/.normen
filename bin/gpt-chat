#!/usr/bin/env bash
#
# GPT-Chat (c) 2023 Normen Hansen
# - needs jq
# - optionally uses rlwrap
#
set -e

# default path to cloud storage
cloud_path="$HOME/Library/Mobile Documents/com~apple~CloudDocs/GPT"
if [ ! -d "$cloud_path" ]; then
  cloud_path="$HOME/.config/gpt-chat"
fi

if ! which jq>/dev/null; then
  echo "Error: jq command not found, please install with 'sudo apt install jq'"
  exit 1
fi

load_config(){
  create_folders
  create_config
  api_key=$(jq -r '.api_key' "$cloud_path/config.json")
  current_conversation=$(jq -r '.current_conversation' "$cloud_path/config.json")
  system_message=$(jq -r '.system_message' "$cloud_path/config.json")
  model_name=$(jq -r '.model_name' "$cloud_path/config.json")
  max_tokens=$(jq -r '.max_tokens' "$cloud_path/config.json")
  temperature=$(jq -r '.temperature' "$cloud_path/config.json")
  loop_question=$(jq -r '.loop_question' "$cloud_path/config.json")
  intro_question=$(jq -r '.intro_question' "$cloud_path/config.json")
}

set_config(){
  create_folders
  create_config
  jq --compact-output --arg name "$1" --arg value "$2" '.[$name] = $value' \
    "$cloud_path/config.json" > "$cloud_path/config.new"
  mv "$cloud_path/config.new" "$cloud_path/config.json"
}

set_config_number(){
  create_folders
  create_config
  eval $1="$2"
  jq --compact-output --arg name "$1" --argjson value $2 '.[$name] = $value' \
    "$cloud_path/config.json" > "$cloud_path/config.new"
  mv "$cloud_path/config.new" "$cloud_path/config.json"
}

create_folders(){
  if [ ! -d "$cloud_path" ]; then
    cloud_path="$(mktemp -d)"
    #echo "Creating: $cloud_path"
    trap "rm -rf $cloud_path; echo 'Deleted temp folder'" EXIT
  fi
  if [ ! -d "$cloud_path/conversation" ]; then
    mkdir -p "$cloud_path/conversation"
  fi
}

create_config(){
  if [ ! -f "$cloud_path/config.json" ]; then
    #echo "Creating: $cloud_path/config.json"
    echo '{
      "model_name":"gpt-3.5-turbo",
      "max_tokens":1024,
      "temperature":1,
      "system_message": "Du bist eine freundliche KI die stets mit akkuraten Informationen zur Hilfe steht.",
      "intro_question":"Wie kann ich helfen?",
      "loop_question":"Noch etwas?",
      "current_conversation": "conversation"
    }' > "$cloud_path/config.json"
    api_key=$(cat ~/.config/openaiapirc | sed -n -e 's/^secret_key *= *\(.*\)$/\1/p')
    if [ "$api_key" == "" ];then
      echo "Error: No API key found at ~/.config/openaiapirc (secret_key=xxx)"
      exit 1
    fi
    set_config api_key "$api_key"
  fi
}

create_conversation(){
  if [ ! -f "$cloud_path/conversation/$current_conversation.json" ]; then
    jq --null-input --compact-output\
      --arg model_name "$model_name"\
      --argjson max_tokens "$max_tokens"\
      --argjson temperature "$temperature"\
      --arg system_message "$system_message" '{
          "model": $model_name,
          "max_tokens": $max_tokens,
          "temperature": $temperature,
          "messages": [
          { "role": "system",
            "content": $system_message }
            ]
          }' > "$cloud_path/conversation/$current_conversation.json"
  fi
}

get_noperm_answer(){
  set -e
  server_response=$(jq --compact-output --arg c "$1" '.messages = .messages + [{"role": "user", "content": $c }]' \
    "$cloud_path/conversation/$current_conversation.json" |\
    curl -s https://api.openai.com/v1/chat/completions \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer ${api_key}" \
      -d @-)
  error_message=$(echo "$server_response" | jq -r '.error.message')
  if [ "$error_message" != "null" ]; then
    echo "Error: $error_message"
  else
    chatgpt_output=$(echo "$server_response" | jq -r '.choices[0].message.content')
    echo "$chatgpt_output"
  fi
}

compact_answers(){
  load_config
  instruction="Bitte fasse das Gespräch bis hier in Kurzform zusammen. Bitte mit allen wichtigen Informationen so dass es als Vorlage für eine Weiterführung des Gesprächs verwendet werden kann. Bitte verzichte dabei auf einleitende Floskeln wie \"Gerne, hier ist eine Zusammenfassung.\". Bitte schreibe die Zusammenfassung wie eine Nachricht an Dich selbst. Also z.B. \"Der Benutzer hat Dich gefragt wie weit der Mond weg ist\". Bitte schliesse nur Informationen aus Aussagen des Benutzers oder Dir ein."
  if [ $# -eq 0 ]; then
    if which rlwrap>/dev/null; then
      instruction=$(rlwrap -pyellow -S "Instruction: " -C gpt-chat -m -M .md -n -z unbackspace -P "$instruction" -o cat)
    fi
  fi
  printf "\e[32mSystem: \e[0m"
  answer=$(get_noperm_answer "$instruction")
  echo "$answer"
  # delete messages
  jq --compact-output ' .messages |= map(select(.role == "system"))' \
    "$cloud_path/conversation/$current_conversation.json" |\
    jq --compact-output --arg c "$answer" '.messages = .messages + [{"role": "system", "content": $c }]' \
    > "$cloud_path/conversation/$current_conversation.new"
  mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
  echo "Done"
}

get_gpt_answer(){
  create_conversation
  jq --compact-output --arg c "$user_input" '.messages = .messages + [{"role": "user", "content": $c }]' \
    "$cloud_path/conversation/$current_conversation.json" \
    > "$cloud_path/conversation/$current_conversation.new"
  mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
  server_response=$(cat "$cloud_path/conversation/$current_conversation.json" |\
    curl -s https://api.openai.com/v1/chat/completions \
      -H "Content-Type: application/json" \
      -H "Authorization: Bearer ${api_key}" \
      -d @-)
  error_message=$(echo "$server_response" | jq -r '.error.message')
  if [ "$error_message" != "null" ]; then
    echo "Error: $error_message"
  else
    chatgpt_output=$(echo "$server_response" | jq -r '.choices[0].message.content')
    jq --compact-output --arg c "$chatgpt_output" '.messages = .messages + [{"role": "assistant", "content": $c }]' \
      "$cloud_path/conversation/$current_conversation.json" > "$cloud_path/conversation/$current_conversation.new"
    mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
    echo "$chatgpt_output"
  fi
}

delete_last_answer(){
  load_config
  if [ -f "$cloud_path/conversation/$current_conversation.json" ]; then
    echo "Deleting last message"
    jq --compact-output 'del(.messages[-1])' \
      "$cloud_path/conversation/$current_conversation.json" \
      > "$cloud_path/conversation/$current_conversation.new"
    mv "$cloud_path/conversation/$current_conversation.new" "$cloud_path/conversation/$current_conversation.json"
  fi
  exit
}

show_first_message(){
  printf "\e[32mSystem: \e[0m"
  if [ -f "$cloud_path/conversation/$current_conversation.json" ]; then
    jq -r '.messages[0].content' "$cloud_path/conversation/$current_conversation.json"
  else
    echo "$system_message"
  fi
}

show_last_answer(){
  if [ -f "$cloud_path/conversation/$current_conversation.json" ]; then
    printf "\e[34mLast: \e[0m"
    jq -r '.messages[-1].content' "$cloud_path/conversation/$current_conversation.json"
  fi
}

read_stdin(){
  load_config
  user_input=$(cat)
  get_gpt_answer
}

read_input(){
  if which rlwrap>/dev/null; then
    user_input=$(rlwrap -pyellow -S "Mensch: " -C gpt-chat -m -M .md -n -z unbackspace -o cat)
  else
    read -r -p "Mensch: "
    user_input=$REPLY
  fi
}

do_loop(){
  user_input="-"
  load_config
  if [ ! -z $show_info ]; then
    echo "Conversation: $current_conversation"
    echo "Path: $cloud_path"
    echo ""
    show_first_message
    show_last_answer
  fi
  echo ""
  read_input
  while [ ! "$user_input" == "" ]
  do
    printf "\e[34mKI: \e[0m"
    get_gpt_answer
    read_input
  done
}

while getopts ":hirxCDc:p:m:s:t:T:" option; do
  case $option in
    h) # display help
      echo "  ___ ___ _____    ___ _         _   "
      echo " / __| _ \\_   _|  / __| |_  __ _| |_ "
      echo "| (_ |  _/ | |   | (__| ' \\/ _\` |  _|"
      echo " \\___|_|   |_|    \\___|_||_\\__,_|\\__|"
      echo "              © by Normen Hansen 2023"
      echo ""
      echo "Communicate with GPT using the command line,"
      echo "conversations are kept in cloud storage or local folder."
      echo ""
      echo "These options are kept for new conversations:"
      echo "-c <conversation>: set conversation name"
      echo "-s <system_message>: set system message (prompt)"
      echo "-t <temperature>: set temperature"
      echo "-T <max_tokens>: set max tokens returned"
      echo "-m <model_name>: set model name"
      echo ""
      echo "Other options:"
      echo "-r read in question from stdin, display answer and exit"
      echo "-l show last answer and prompt"
      echo "-p <cloud_path>: set path for storage (set before other options)"
      echo "-x: temporary storage only (set before other options)"
      echo ""
      echo "Commands:"
      echo "-D delete last message and exit"
      echo "-C compact conversation by letting gpt make a summary and exit"
      echo ""
      echo "Storage folder:"
      echo "If none of these are found a temp folder is created."
      echo "- iCloud/GPT"
      echo "- HOME/.config/gpt-chat"
      echo ""
      echo "API Key:"
      echo "Key is expected at ~/.config/openaiapirc (secret_key=xxx)"
      echo ""
      echo "Dependencies:"
      echo "Needs jq for JSON processing and optionally rlwrap,"
      echo "rlwrap allows for completion, history and multiline editor input."
      exit;;
    x) cloud_path="";;
    p) cloud_path="$OPTARG"
      if [ ! -d "$cloud_path" ]; then
        mkdir -p "$cloud_path"
      fi;;
    i) show_info=1;;
    c) set_config "current_conversation" "$OPTARG";;
    m) set_config "model_name" "$OPTARG";;
    s) set_config "system_message" "$OPTARG";;
    t) set_config_number "temperature" $OPTARG;;
    T) set_config_number "max_tokens" $OPTARG;;
    D) delete_last_answer
      exit;;
    C) compact_answers
      exit;;
    r) read_stdin
      exit;;
    \?)
      echo "Error: Invalid option, use -h for help."
      exit;;
  esac
done
shift $((OPTIND-1))

create_folders
create_config
do_loop
