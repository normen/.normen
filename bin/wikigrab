#!/usr/bin/env perl
use strict;
use warnings;
use v5.12;
use File::Temp qw/ tempfile tempdir /;
# external
#use Mojo::JSON qw(j);
#use Term::ReadKey;
no warnings "experimental";
my $url = "https://en.wikipedia.org";
my $api_path = "w/api.php";
my $search = "";
my $width = 0;
if(@ARGV == 0){
  print "Usage: wikigrab [options] search terms\n";
  print "\n";
  print "Options:\n";
  print "-l  Language (en)\n";
  print "-u  MediaWiki URL (https://en.wikipedia.org)\n";
  print "-a  MediaWiki API path (w/api.php)\n";
  print "-w  Render Width (term_width or 80)\n";
  exit 0;
}
while(my $arg = shift(@ARGV)){
  given($arg){
    when("-u"){ $url = shift(@ARGV); }
    when("-l"){ my $val = shift(@ARGV); $url =~ s/en/$val/g }
    when("-a"){ $api_path = shift(@ARGV); }
    when("-w"){ $width = shift(@ARGV); }
    when("-f"){ $search = shift(@ARGV); }
    default { $search .= $arg; }
  }
}
if(!$width){
  if(defined $ENV{'TMUX'}){
    $width = qx{tmux display-message -p "#{pane_width}"};
  } else {
    $width = qx{tput cols};
  }
  $width--;
}
$search =~ s/([^A-Za-z0-9])/sprintf("%%%2.2X", ord($1))/ge;
my $raw = qx{curl -H "Content-Type: application/x-www-form-urlencoded; charset=utf-8" -sL '$url/$api_path?action=parse&format=json&page=$search'};
#my $json = j $raw;
#die "No JSON response" unless $json;
#my $htmldata = $json->{parse}->{text}->{"*"};
#if(!$htmldata){
  #print "-- No results --\n";
  #exit 0;
#}
#open (my $ah, "|pandoc --lua-filter ~/.normen/bin/ansifilter.lua --columns $width -f html -t plain") or die "pandoc fail";
$raw =~ s/\*/content/;
open (my $ah, "|jq -cr '.parse.text.content' |  pandoc --lua-filter ~/.normen/bin/ansifilter.lua --columns $width -f html -t plain") or die "pandoc fail";
binmode $ah, ':utf8';
#print $ah $htmldata;
print $ah $raw;
close $ah;

