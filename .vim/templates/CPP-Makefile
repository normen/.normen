TARGET_EXEC ?= myapp

SRC_DIRS ?= ./src ./lib

INC_DIRS ?= /usr/local/include
LIB_DIRS ?= /usr/local/lib

#LDFLAGS ?= -lwiringPiDev -lpthread -li2c -lm -lcrypt -lrt -lsupc++
#CFLAGS ?= 
CXXFLAGS ?= -std=c++11
CPPFLAGS ?= -MMD -MP -Wall -Wextra

BUILD_DIR ?= ./build

SRCS := $(shell find $(SRC_DIRS) -name '*.cpp' -or -name '*.c' -or -name '*.s')
OBJS := $(SRCS:%=$(BUILD_DIR)/%.o)
DEPS := $(OBJS:.o=.d)

SRC_SUBDIRS := $(shell find $(SRC_DIRS) -type d)
INC_FLAGS := $(addprefix -I,$(SRC_SUBDIRS)) $(addprefix -I,$(INC_DIRS))
LIB_FLAGS := $(addprefix -L,$(LIB_DIRS))

$(BUILD_DIR)/$(TARGET_EXEC): $(OBJS)
	$(CC) $(OBJS) -o $@ $(LDFLAGS) $(LIB_FLAGS)

# assembly
$(BUILD_DIR)/%.s.o: %.s
	$(MKDIR_P) $(dir $@)
	$(AS) $(ASFLAGS) -c $< -o $@

# c source
$(BUILD_DIR)/%.c.o: %.c
	$(MKDIR_P) $(dir $@)
	$(CC) $(INC_FLAGS) $(CPPFLAGS) $(CFLAGS) -c $< -o $@

# c++ source
$(BUILD_DIR)/%.cpp.o: %.cpp
	$(MKDIR_P) $(dir $@)
	$(CXX) $(INC_FLAGS) $(CPPFLAGS) $(CXXFLAGS) -c $< -o $@


.PHONY: build

build: $(BUILD_DIR)/$(TARGET_EXEC)

.PHONY: run

run: build
	$(BUILD_DIR)/$(TARGET_EXEC)

.PHONY: clean

clean:
	$(RM) -r $(BUILD_DIR)

-include $(DEPS)

MKDIR_P ?= mkdir -p
