" standard stuff
set nocompatible
set noswapfile
set encoding=utf-8
syntax enable
filetype plugin indent on
color default
set background=dark
set splitbelow splitright
set number
set relativenumber
set ruler
set showcmd
set tabstop=2
set shiftwidth=2
set expandtab
set nowrap
set linebreak
set cursorline
set noerrorbells
set updatetime=500
set mouse=a
set ttymouse=xterm2
" avoid adding line breaks while typing
set textwidth=0
" let backspace delete eol, before insert etc.
set backspace=2
" better completion
set complete+=kspell
" don't search included (perl)
set complete-=i
set completeopt=menuone,noinsert
set shortmess+=c
" always show sign column
"set signcolumn=yes
" no backup files -> issues with lsp
set nobackup
set nowritebackup
" indentation by syntax
set autoread
set autoindent
set smartindent
" show tabs, trailing whitespace
set listchars=tab:.-.,trail:~,extends:>
set list
" folds
set foldmethod=indent
set foldlevelstart=99
set foldnestmax=1
" interactive search
set hls is
" ignore case
set ic
" nicer vsplit character
set fillchars+=vert:\â”ƒ
" auto-complete / netrw
set path+=**
set wildmenu
set wildignore=*.o,*.obj,*-
set wildignore+=*node_modules*
set wildignore+=*DS_Store*
"set wildignore+=*.png,*.jpg*,*.gif
" session.vim content
set sessionoptions=globals,localoptions,buffers,curdir,tabpages,winsize
" markdown syntax highlights
let g:markdown_fenced_languages = ['go','perl','sh', 'python', 'cpp', 'c', 'javascript', 'vim']
" Lexplore NerdierTree
let g:netrw_banner = 0
let g:netrw_liststyle = 3
" open in previous window
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
" vertical split
let g:netrw_preview = 1
" don't (re)store clipboard
let g:netrw_clipboard = 0
" avoid issues with tmux and color schemes
set t_Co=256
" disable Background Color Erase (BCE) so that color schemes
" render properly when inside 256-color tmux and GNU screen.
" see also http://snk.tuxfamily.org/log/vim-256color-bce.html
if &term =~ '256color'
  set t_ut=
endif

"if has("termguicolors")
  " fix true color not work under tmux
  "let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  "let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  " enable true color
  "set termguicolors
"endif

" set transparent background when colorscheme loads
augroup transparent_bg
  autocmd!
  autocmd Colorscheme * hi! Normal ctermbg=NONE cterm=NONE
  autocmd Colorscheme * hi! FoldColumn ctermbg=NONE cterm=NONE
  autocmd Colorscheme * hi! SignColumn ctermbg=NONE cterm=NONE
  autocmd Colorscheme * hi! SignifySignAdd    ctermfg=green  guifg=#00ff00 cterm=NONE
  autocmd Colorscheme * hi! SignifySignDelete ctermfg=red    guifg=#ff0000 cterm=NONE
  autocmd Colorscheme * hi! SignifySignChange ctermfg=yellow guifg=#ffff00 cterm=NONE
augroup END

" ** Mappings & Commands **
let mapleader = " "

" session / project setup
nnoremap <F1> :vert lefta call term_start("perl ".$NORMEN."/install.pl",{'term_finish':'close'})<CR>
nnoremap <F2> :silent mksession! session.vim<CR>

" build/generate commands
"nnoremap <F4> :silent set ft=homebridge\|make\|set ft=javascript<CR>
"nnoremap <F5> :silent make<CR>:cw<CR><C-L>
"nnoremap <F6> :silent !semistandard % --fix<CR><C-L>
nnoremap <F7> :silent !ctags -R .<CR><C-L>

nnoremap <F8> :silent call QuickFix_toggle()<CR>
nnoremap <F9> :cp<CR>
nnoremap <F10> :cn<CR>

" Netrw mappings (uses autocmd for local buffer)
augroup netrw_mapping
  autocmd!
  autocmd filetype netrw call NetrwMapping()
augroup END
function! NetrwMapping()
  nmap <buffer> <C-h> <C-w>h
  nmap <buffer> <C-l> <C-w>l
  nmap <buffer> cw R
  nmap <buffer> dd D
  nmap <buffer> mk d
endfunction

" Toggle Lexplore or vifm with Ctrl-E
if !executable('vifm')
  map <silent> <C-E> :Lexplore<CR>
else
  map <silent> <C-E> :Vifm<CR>
  map <silent> <C-W><C-E> :VsplitVifm<CR>
  map <silent> <C-T><C-E> :TabVifm<CR>
endif

" toggle paste mode
nmap <C-p> :set invpaste<CR>

" next tab in normal mode
nmap <C-n> :tabn<CR>

" move text around in visual mode with arrows
vnoremap <Down> :m '>+1<CR>gv=gv
vnoremap <Up> :m '<-2<CR>gv=gv
"nnoremap <Down> :m +1<CR>
"nnoremap <Up> :m -2<CR>

" create space with -/+
nnoremap - O<Esc>j
nnoremap + o<Esc>k

" move normally in wrapped lines
nnoremap <expr> j v:count ? 'j' : 'gj'
nnoremap <expr> k v:count ? 'k' : 'gk'

" ctrl-space
"imap <C-Space> <C-x><C-o>
imap <C-@> <C-Space>

" ctrl-zoom
nmap <silent> <C-W>z <C-W>\|<C-W>_

" shift-stuff (Ctrl-V + combo)
map [1;2A <s-up>
map [1;2B <s-down>
map [1;2D <s-left>
map [1;2C <s-right>

" fix Ctrl-Arrows
map <ESC>[1;5D <C-Left>
map <ESC>[1;5C <C-Right>
map <ESC>[1;5A <C-Up>
map <ESC>[1;5B <C-Down>
map <ESC>[D <C-Left>
map <ESC>[C <C-Right>
map <ESC>[A <C-Up>
map <ESC>[B <C-Down>

" window nav
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
noremap <silent> <C-Up> :resize +3<CR>
noremap <silent> <C-Down> :resize -3<CR>
noremap <silent> <C-Left> :vertical resize -3<CR>
noremap <silent> <C-Right> :vertical resize +3<CR>

" copy-paste easily from clipboard
nnoremap <Leader>yy "*yy
vnoremap <Leader>y "*y
vnoremap <Leader>Y "*y$
nnoremap <Leader>p "*p
nnoremap <Leader>P "*P

" quick tools
nnoremap <Leader>n :noh<CR>
nnoremap <Leader>. @w

" opening/closing brackets
inoremap {<CR> {<CR>}<ESC>O

" search with comma
nmap , ;

" german keys
nmap Ã¼ ]
" for jumping on a-shell
nmap Ãœ <C-]>
"nnoremap ]Ã¼ ]]
nmap Ã¤ [
"nnoremap [Ã¤ [[
nmap Ã¶ :
vmap Ã¶ :
imap <C-Ã¤> <Esc>

"section: stuff that doesn't start with blank and ends with {
"^=start [^\s\t ]=anything but \s, \t or space $=end
nnoremap ]Ã¼ /^[^\s\t ].*{$<CR>:noh<CR>
nnoremap [Ã¤ ?^[^\s\t ].*{$<CR>:noh<CR>

nnoremap ]] /^[^\s\t ].*{$<CR>:noh<CR>
nnoremap [[ ?^[^\s\t ].*{$<CR>:noh<CR>

" more logical Y
map Y y$

" operate on 'method'
nnoremap vm Vf{%
nnoremap dm Vf{%d
nnoremap ym Vf{%y
nnoremap cm Vf{%c

" operate on 'all method'
nnoremap vam va{V
nnoremap dam va{Vd
nnoremap yam va{Vy
nnoremap cam va{Vc

" execute current line on shell
nnoremap gs :.w !bash<CR>

" built-in Man plugin
:runtime ftplugin/man.vim

" Function to source only if file exists
function! SourceIfExists(file)
  if filereadable(expand(a:file))
    exe 'source' a:file
  endif
endfunction

" set $NORMEN env var if it doesn't exist
if empty($NORMEN)
  let $NORMEN = $HOME . '/.normen'
endif

" load optional/local files
call SourceIfExists("$NORMEN/.vim/plugins.vim")
call SourceIfExists("$NORMEN/.vim/commands.vim")
call SourceIfExists("$NORMEN/.vim/local.vim")
