" standard stuff
set nocompatible
set noswapfile
set encoding=utf-8
syntax enable
filetype plugin indent on
color default
colorscheme gruvbox
set background=dark
" avoid issues with tmux and color schemes
set t_Co=256
set splitbelow splitright
set number
set relativenumber
set ruler
set showcmd
set tabstop=2
set shiftwidth=2
set expandtab
set nowrap
set linebreak
" avoid adding line breaks while typing
set textwidth=0
set noerrorbells
"set display=truncate
set updatetime=500
set mouse=a
set ttymouse=xterm2
"set clipboard=unnamed
set path+=**
set wildmenu
set wildignore=*.o,*.obj,*-
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*node_modules*
set wildignore+=*DS_Store*
set wildignore+=*.png,*.jpg*,*.gif
" let backspace delete eol, before insert etc.
set backspace=2

set autoread
set autoindent
set smartindent

" interactive search
set hls is
" ignore case
set ic

" Lexplore NerdierTree
let g:netrw_banner = 0
let g:netrw_liststyle = 3
" open in previous window
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 25
" vertical split
let g:netrw_preview = 1

" nicer vsplit character
set fillchars+=vert:\â”ƒ

" MacOS Terminal path in title
" use Ctrl-V Esc and Ctrl-V Ctrl-G to insert
set t_ts=]6;
set t_fs=
set title
"set titlestring=%{\"file://\".hostname().expand(\"%:p\")}
auto BufEnter * let &titlestring = "file://" . substitute(hostname().expand("%:p"), " ", "+", "")

" disable gitgutter if no git executable
if !executable('git')
  let g:gitgutter_enabled = 0
endif

" allow toggling quick fix window
function! QuickFix_toggle()
  for i in range(1, winnr('$'))
    let bnum = winbufnr(i)
    if getbufvar(bnum, '&buftype') == 'quickfix'
      cclose
      return
    endif
  endfor
  copen
endfunction

" ** Mappings & Commands **
let mapleader = ","

" session / project setup
nnoremap <F1> :silent source! session.vim<CR>
nnoremap <F2> :silent mksession! session.vim<CR>

" build/generate commands
nnoremap <F5> :silent make<CR>:cw<CR><C-L>
nnoremap <F6> :silent !semistandard % --fix<CR><C-L>
nnoremap <F7> :silent !ctags -R .<CR><C-L>

nnoremap <F8> :silent call QuickFix_toggle()<CR>
nnoremap <F9> :cp<CR>
nnoremap <F10> :cn<CR>

" Toggle Lexplore or vifm with Ctrl-E
if !executable('vifm')
  map <silent> <C-E> :Lexplore<CR>
else
  map <silent> <C-E> :Vifm<CR>
endif

" window nav
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
" these don't work in vim, only neo?
noremap <silent> <C-Up> :resize +3<CR>
noremap <silent> <C-Down> :resize -3<CR>
noremap <silent> <C-Left> :vertical resize +3<CR>
noremap <silent> <C-Right> :vertical resize -3<CR>

"masochism
nnoremap <up> ddkP
vnoremap <up> dkP
nnoremap <down> ddjP
vnoremap <down> djp
nnoremap <left> O<Esc>j
nnoremap <right> o<Esc>k

" copy-paste easily from clipboard
nnoremap <Leader>yy "*yy
vnoremap <Leader>y "*y
nnoremap <Leader>p "*p
nnoremap <Leader>P "*P

" german keys
nmap Ã¼ ]
nnoremap ]Ã¼ ]]
nmap Ã¤ [
nnoremap [Ã¤ [[

" operate on 'method'
nnoremap vm Vf{%
nnoremap dm Vf{%d
nnoremap ym Vf{%y
nnoremap cm Vf{%c

" operate on 'all method'
nnoremap vam va{V
nnoremap dam va{Vd
nnoremap yam va{Vy
nnoremap cam va{Vc

" commenting
map <Leader># :s/^/#/<CR>:noh<CR>
map <Leader>/ :s/^/\/\//<CR>:noh<CR>
map <Leader>" :s/^/\"/<CR>:noh<CR>
map <Leader>% :s/^/%/<CR>:noh<CR>
map <Leader>! :s/^/!/<CR>:noh<CR>
map <Leader>; :s/^/;/<CR>:noh<CR>
map <Leader>- :s/^/--/<CR>:noh<CR>
map <Leader><BS> :s/^\/\/\\|^--\\|^> \\|^[#"%!;]//<CR>:noh<CR>

"map <Leader>* :s/^\(.*\)$/\/\* \1 \*\//<CR>:noh<CR>
"map <Leader>( :s/^\(.*\)$/\(\* \1 \*\)/<CR>:noh<CR>
"map <Leader>< :s/^\(.*\)$/<!-- \1 -->/<CR>:noh<CR>
"map <Leader>d :s/^\([/(]\*\\|<!--\) \(.*\) \(\*[/)]\\|-->\)$/\2/<CR>:noh<CR>

" custom commands
:command W w

:command -nargs=* Search :vim /<args>/g %<bar>cw
:command -nargs=* SearchFiles :vim /<args>/g **/*<bar>cw
:command FixLineEndings :%s//\r/g
:command FixAdditionalLineEndings :%s///g

:command -nargs=1 GitClone !git clone <args>
:command GitInit !git init
:command GitCommit !git commit
:command GitCommitThis !git add %;git commit
:command GitCommitAll !git add -A;git commit
:command GitPush !git push -f -u origin master
:command GitCommitAndPush !git add -A;git commit;git push -f -u origin master
:command GitPull !git pull --rebase origin master
:command GitStash !git stash save -a
:command GitPop !git stash pop
:command GitUntracked !git ls-files --others --exclude-standard

:command HbUploadPlugin !rsync -azrv --delete ${PWD} pi@homebridge.local:~/npm-code/
:command HbUploadPluginDry !rsync -n -azrv --delete ${PWD} pi@homebridge.local:~/npm-code/
:command HbDownloadPlugin !rsync -azrv --delete pi@homebridge.local:~/npm-code/${PWD\#\#*/} ~/Dev/NodeCode/homebridge/npm-code/
:command HbDownloadPluginDry !rsync -n -azrv --delete pi@homebridge.local:~/npm-code/${PWD\#\#*/} ~/Dev/NodeCode/homebridge/npm-code/
:command HbFullUpload !rsync -azrv --delete ~/Dev/NodeCode/homebridge/npm-code pi@homebridge.local:~/
:command HbFullUploadDry !rsync -n -azrv --delete ~/Dev/NodeCode/homebridge/npm-code pi@homebridge.local:~/
:command HbFullDownload !rsync -azrv --delete pi@homebridge.local:~/npm-code ~/Dev/NodeCode/homebridge/
:command HbFullDownloadDry !rsync -n -azrv --delete pi@homebridge.local:~/npm-code ~/Dev/NodeCode/homebridge/

:command BackupDev !rsync -azrv --delete ~/Dev normen@normenhansen.de:~/backup/MacBook
:command RestoreDevDry !rsync -n -azrv --delete normen@normenhansen.de:~/backup/MacBook/Dev ~/

:command WebAppUp !cd client;npm run build;cd ..;git add -A;git commit -m 'update';git push -u -f origin master

:command PIOCreateMakefile !cp ~/.vim/templates/PlatformIO-Makefile ./Makefile
:command -nargs=1 PIOInit <Leader>!platformio project init --ide vim --board <args>
